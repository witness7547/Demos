Recognize CPU-Bound and I/O-Bound Work
The first two examples of this guide showed how you can use async and await for I/O-bound and CPU-bound work. 
It's key that you can identify when a job you need to do is I/O-bound or CPU-bound, because it can greatly 
affect the performance of your code and could potentially lead to misusing certain constructs.
Here are two questions you should ask before you write any code:

Will your code be "waiting" for something, such as data from a database?
If your answer is "yes", then your work is I/O-bound.

Will your code be performing a very expensive computation?
If you answered "yes", then your work is CPU-bound.

If the work you have is I/O-bound, use async and await without Task.Run. You should not use the Task Parallel Library. 
The reason for this is outlined in the Async in Depth article.

If the work you have is CPU-bound and you care about responsiveness, use async and await but spawn the work off
 on another thread with Task.Run. If the work is appropriate for concurrency and parallelism, you should also 
 consider using the Task Parallel Library.

Additionally, you should always measure the execution of your code. For example, you may find yourself in a situation
 where your CPU-bound work is not costly enough compared with the overhead of context switches when multithreading.
  Every choice has its tradeoff, and you should pick the correct tradeoff for your situation.




  Task and Task<T>
Tasks are constructs used to implement what is known as the Promise Model of Concurrency.
 In short, they offer you a "promise" that work will be completed at a later point, letting you coordinate with the promise with a clean API.
Task represents a single operation which does not return a value.
Task<T> represents a single operation which returns a value of type T.
It’s important to reason about tasks as abstractions of work happening asynchronously, and not an abstraction over threading. 
By default, tasks execute on the current thread and delegate work to the Operating System, as appropriate. Optionally,
 tasks can be explicitly requested to run on a separate thread via the Task.Run API.
Tasks expose an API protocol for monitoring, waiting upon and accessing the result value (in the case of Task<T>) of a task.
 Language integration, with the await keyword, provides a higher-level abstraction for using tasks.
Using await allows your application or service to perform useful work while a task is running by yielding control to
 its caller until the task is done. 
 *****  Your code does not need to rely on callbacks or events to continue execution after the task has been completed.  ***** 
 The language and task API integration does that for you. If you’re using Task<T>, 
 the await keyword will additionally "unwrap" the value returned when the Task is complete. The details of how this works are explained further below.