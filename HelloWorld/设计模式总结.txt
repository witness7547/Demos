策略
UPSListenerBase : IUPSListener
ApcUpsListener : UPSListenerBase

public class RISDataProviderByFodicom : IRISDataProvider
public class RISDataProviderByDCMTK : IRISDataProvider


迭代器
一般集合内部会内置一个迭代器用于访问集合中的元素，但是数组就得自己实现一个
foreach

观察者
用户登录成功后发布登录完成消息
订阅者者刷新日期
（CarDealer newcar Customer）

单例
class ConfigurationReader : IConfigReader
public class ConfigurationWriter : IConfigWriter

ServiceLocator
private readonly static ConcurrentDictionary<Type, IRepository> repositoryDictionary = new ConcurrentDictionary<Type,IRepository>();
public static T GetRepository<T>() where T : IRepository
private static T CreateRepository<T>() where T : IRepository

代理：rpc
stub skeleton

/* C# */
常量是不可变的值，在编译时是已知的，在程序的生命周期内不会改变。 常量使用 const 修饰符声明。 仅 C# 内置类型（不包括 System.Object）可声明为 const。 有关内置类型的列表，请参阅内置类型表。 用户定义的类型（包括类、结构和数组）不能为 const。 使用 readonly 修饰符创建在运行时一次性（例如在构造函数中）初始化的类、结构或数组，此后不能更改。
C# 不支持 const 方法、属性或事件。
常量在声明时必须初始化。 例如:
class Calendar1
{
    public const int months = 12;
}

const readonly sealed abstract virtual 
event 关键字用于声明发布服务器类中的事件

度0：n0 (叶子节点)
度1：n1（完全二叉树要么为0要么为1）
度2：n2
n为总结点数

n0 + n1 + n2 = n
2 * n2 + n1 + 1 = n

n0 = (n+1-n1)/2
即n0 = (n+1)/2；(对应n1 = 0)
 或者n0 = n/2;  (对应n1 = 1)



/* 关于构造函数中不能调用虚函数问题*/
In order to answer your question, consider this question: what will the below code print out when the Child object is instantiated?

class Parent
{
    public Parent()
    {
        DoSomething();
    }

    protected virtual void DoSomething() 
    {
    }
}

class Child : Parent
{
    private string foo;

    public Child() 
    { 
        foo = "HELLO"; 
    }

    protected override void DoSomething()
    {
        Console.WriteLine(foo.ToLower()); //NullReferenceException!?!
    }
}
The answer is that in fact a NullReferenceException will be thrown, because foo is null. An object's base constructor is called before its own constructor. By having a virtual call in an object's constructor you are introducing the possibility that inheriting objects will execute code before they have been fully initialized.


